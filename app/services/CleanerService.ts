import { PrismaClient } from '@prisma/client';

class CleanerService {
  private prisma: PrismaClient;
  private intervalId: NodeJS.Timeout | null = null;
  private isRunning: boolean = false;

  constructor() {
    this.prisma = new PrismaClient();
  }

  /**
   * Inicia o servi√ßo de limpeza autom√°tica
   * Executa a cada 60 segundos
   */
  start(): void {
    if (this.isRunning) {
      console.log('‚ö†Ô∏è CleanerService j√° est√° rodando');
      return;
    }

    console.log('üßπ Iniciando CleanerService...');
    this.isRunning = true;

    // Executa imediatamente na primeira vez
    this.cleanOldRecords();

    // Configura para executar a cada 60 segundos (60000ms)
    this.intervalId = setInterval(() => {
      this.cleanOldRecords();
    }, 60000);

    console.log('‚úÖ CleanerService iniciado com sucesso');
  }

  /**
   * Para o servi√ßo de limpeza autom√°tica
   */
  stop(): void {
    if (!this.isRunning) {
      console.log('‚ö†Ô∏è CleanerService n√£o est√° rodando');
      return;
    }

    console.log('üõë Parando CleanerService...');
    
    if (this.intervalId) {
      clearInterval(this.intervalId);
      this.intervalId = null;
    }

    this.isRunning = false;
    console.log('‚úÖ CleanerService parado com sucesso');
  }

  /**
   * Remove conversas antigas (mais de 1 hora sem atividade)
   */
  private async cleanOldRecords(): Promise<void> {
    try {
      console.log('üßπ Executando limpeza de conversas antigas...');

      // Calcula o timestamp de 1 hora atr√°s
      const oneHourAgo = new Date();
      oneHourAgo.setHours(oneHourAgo.getHours() - 1);

      // Remove conversas antigas (baseado na √∫ltima atividade)
      const deletedConversations = await this.prisma.conversation.deleteMany({
        where: {
          lastActivity: {
            lt: oneHourAgo
          }
        }
      });

      if (deletedConversations.count > 0) {
        console.log(`üóëÔ∏è Limpeza conclu√≠da: ${deletedConversations.count} conversas antigas removidas`);
      } else {
        console.log('‚ú® Nenhuma conversa antiga encontrada para remo√ß√£o');
      }

    } catch (error) {
      console.error('‚ùå Erro durante a limpeza de registros:', error);
    }
  }

  /**
   * Executa limpeza manual (para testes ou execu√ß√£o sob demanda)
   */
  async cleanNow(): Promise<void> {
    console.log('üßπ Executando limpeza manual...');
    await this.cleanOldRecords();
  }

  /**
   * Verifica se o servi√ßo est√° rodando
   */
  getStatus(): { isRunning: boolean; intervalMs: number } {
    return {
      isRunning: this.isRunning,
      intervalMs: 60000
    };
  }

  /**
   * Fecha a conex√£o com o banco de dados
   */
  async close(): Promise<void> {
    this.stop();
    await this.prisma.$disconnect();
    console.log('üîå Conex√£o do CleanerService com o banco fechada');
  }
}

export default CleanerService;
